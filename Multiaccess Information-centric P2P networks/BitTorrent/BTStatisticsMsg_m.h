//
// Generated file, do not edit! Created by opp_msgc 3.3 from BTStatisticsMsg.msg.
//

#ifndef _BTSTATISTICSMSG_M_H_
#define _BTSTATISTICSMSG_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0303
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{ ... }} section:

#include "../TCPApp/GenericAppMsg_m.h"
// end cplusplus


/**
 * Class generated from <tt>BTStatisticsMsg.msg</tt> by opp_msgc.
 * <pre>
 * message BTStatisticsDWLMsg extends GenericAppMsg
 * {
 *     properties:
 *         omitGetVerb = true;
 * 
 *     fields:
 * 	double downloadTime;		
 * 	double remainingBlocks;		
 * 
 * };
 * </pre>
 */
class BTStatisticsDWLMsg : public GenericAppMsg
{
  protected:
    double downloadTime_var;
    double remainingBlocks_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BTStatisticsDWLMsg&);

  public:
    BTStatisticsDWLMsg(const char *name=NULL, int kind=0);
    BTStatisticsDWLMsg(const BTStatisticsDWLMsg& other);
    virtual ~BTStatisticsDWLMsg();
    BTStatisticsDWLMsg& operator=(const BTStatisticsDWLMsg& other);
    virtual cPolymorphic *dup() const {return new BTStatisticsDWLMsg(*this);}
    virtual void netPack(cCommBuffer *b);
    virtual void netUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual double downloadTime() const;
    virtual void setDownloadTime(double downloadTime_var);
    virtual double remainingBlocks() const;
    virtual void setRemainingBlocks(double remainingBlocks_var);
};

inline void doPacking(cCommBuffer *b, BTStatisticsDWLMsg& obj) {obj.netPack(b);}
inline void doUnpacking(cCommBuffer *b, BTStatisticsDWLMsg& obj) {obj.netUnpack(b);}

/**
 * Class generated from <tt>BTStatisticsMsg.msg</tt> by opp_msgc.
 * <pre>
 * message BTStatisticsStartupTimeMsg extends GenericAppMsg
 * {
 * properties:
 *     omitGetVerb = true;
 * 
 * fields:
 *     double startupTime;
 * 
 * };
 * </pre>
 */
class BTStatisticsStartupTimeMsg : public GenericAppMsg
{
  protected:
    double startupTime_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BTStatisticsStartupTimeMsg&);

  public:
    BTStatisticsStartupTimeMsg(const char *name=NULL, int kind=0);
    BTStatisticsStartupTimeMsg(const BTStatisticsStartupTimeMsg& other);
    virtual ~BTStatisticsStartupTimeMsg();
    BTStatisticsStartupTimeMsg& operator=(const BTStatisticsStartupTimeMsg& other);
    virtual cPolymorphic *dup() const {return new BTStatisticsStartupTimeMsg(*this);}
    virtual void netPack(cCommBuffer *b);
    virtual void netUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual double startupTime() const;
    virtual void setStartupTime(double startupTime_var);
};

inline void doPacking(cCommBuffer *b, BTStatisticsStartupTimeMsg& obj) {obj.netPack(b);}
inline void doUnpacking(cCommBuffer *b, BTStatisticsStartupTimeMsg& obj) {obj.netUnpack(b);}

/**
 * Class generated from <tt>BTStatisticsMsg.msg</tt> by opp_msgc.
 * <pre>
 * message BTStatisticsNumProvidersMsg extends GenericAppMsg
 * {
 *     properties:
 *         omitGetVerb = true;
 * 
 *     fields:
 * 	int numPeers;
 * };
 * </pre>
 */
class BTStatisticsNumProvidersMsg : public GenericAppMsg
{
  protected:
    int numPeers_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BTStatisticsNumProvidersMsg&);

  public:
    BTStatisticsNumProvidersMsg(const char *name=NULL, int kind=0);
    BTStatisticsNumProvidersMsg(const BTStatisticsNumProvidersMsg& other);
    virtual ~BTStatisticsNumProvidersMsg();
    BTStatisticsNumProvidersMsg& operator=(const BTStatisticsNumProvidersMsg& other);
    virtual cPolymorphic *dup() const {return new BTStatisticsNumProvidersMsg(*this);}
    virtual void netPack(cCommBuffer *b);
    virtual void netUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int numPeers() const;
    virtual void setNumPeers(int numPeers_var);
};

inline void doPacking(cCommBuffer *b, BTStatisticsNumProvidersMsg& obj) {obj.netPack(b);}
inline void doUnpacking(cCommBuffer *b, BTStatisticsNumProvidersMsg& obj) {obj.netUnpack(b);}

/**
 * Class generated from <tt>BTStatisticsMsg.msg</tt> by opp_msgc.
 * <pre>
 * message BTStatisticsNumSeederBlocksMsg extends GenericAppMsg
 * {
 *     properties:
 *         omitGetVerb = true;
 * 
 *     fields:
 * 	double numSeederBlocks;
 * };
 * </pre>
 */
class BTStatisticsNumSeederBlocksMsg : public GenericAppMsg
{
  protected:
    double numSeederBlocks_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BTStatisticsNumSeederBlocksMsg&);

  public:
    BTStatisticsNumSeederBlocksMsg(const char *name=NULL, int kind=0);
    BTStatisticsNumSeederBlocksMsg(const BTStatisticsNumSeederBlocksMsg& other);
    virtual ~BTStatisticsNumSeederBlocksMsg();
    BTStatisticsNumSeederBlocksMsg& operator=(const BTStatisticsNumSeederBlocksMsg& other);
    virtual cPolymorphic *dup() const {return new BTStatisticsNumSeederBlocksMsg(*this);}
    virtual void netPack(cCommBuffer *b);
    virtual void netUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual double numSeederBlocks() const;
    virtual void setNumSeederBlocks(double numSeederBlocks_var);
};

inline void doPacking(cCommBuffer *b, BTStatisticsNumSeederBlocksMsg& obj) {obj.netPack(b);}
inline void doUnpacking(cCommBuffer *b, BTStatisticsNumSeederBlocksMsg& obj) {obj.netUnpack(b);}

/**
 * Class generated from <tt>BTStatisticsMsg.msg</tt> by opp_msgc.
 * <pre>
 * message BTStatisticsDownloadRateMsg extends GenericAppMsg
 * {
 *     properties:
 *         omitGetVerb = true;
 * 
 *     fields:
 * 	double downloadRate;
 * };
 * </pre>
 */
class BTStatisticsDownloadRateMsg : public GenericAppMsg
{
  protected:
    double downloadRate_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BTStatisticsDownloadRateMsg&);

  public:
    BTStatisticsDownloadRateMsg(const char *name=NULL, int kind=0);
    BTStatisticsDownloadRateMsg(const BTStatisticsDownloadRateMsg& other);
    virtual ~BTStatisticsDownloadRateMsg();
    BTStatisticsDownloadRateMsg& operator=(const BTStatisticsDownloadRateMsg& other);
    virtual cPolymorphic *dup() const {return new BTStatisticsDownloadRateMsg(*this);}
    virtual void netPack(cCommBuffer *b);
    virtual void netUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual double downloadRate() const;
    virtual void setDownloadRate(double downloadRate_var);
};

inline void doPacking(cCommBuffer *b, BTStatisticsDownloadRateMsg& obj) {obj.netPack(b);}
inline void doUnpacking(cCommBuffer *b, BTStatisticsDownloadRateMsg& obj) {obj.netUnpack(b);}

/**
 * Class generated from <tt>BTStatisticsMsg.msg</tt> by opp_msgc.
 * <pre>
 * message BTStatisticsUploadRateMsg extends GenericAppMsg
 * {
 *     properties:
 *         omitGetVerb = true;
 * 
 *     fields:
 * 	double uploadRate;
 * };
 * </pre>
 */
class BTStatisticsUploadRateMsg : public GenericAppMsg
{
  protected:
    double uploadRate_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BTStatisticsUploadRateMsg&);

  public:
    BTStatisticsUploadRateMsg(const char *name=NULL, int kind=0);
    BTStatisticsUploadRateMsg(const BTStatisticsUploadRateMsg& other);
    virtual ~BTStatisticsUploadRateMsg();
    BTStatisticsUploadRateMsg& operator=(const BTStatisticsUploadRateMsg& other);
    virtual cPolymorphic *dup() const {return new BTStatisticsUploadRateMsg(*this);}
    virtual void netPack(cCommBuffer *b);
    virtual void netUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual double uploadRate() const;
    virtual void setUploadRate(double uploadRate_var);
};

inline void doPacking(cCommBuffer *b, BTStatisticsUploadRateMsg& obj) {obj.netPack(b);}
inline void doUnpacking(cCommBuffer *b, BTStatisticsUploadRateMsg& obj) {obj.netUnpack(b);}

#endif // _BTSTATISTICSMSG_M_H_
