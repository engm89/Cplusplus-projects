//
// Generated file, do not edit! Created by opp_msgc 3.3 from BTPeerWireMsg.msg.
//

#ifndef _BTPEERWIREMSG_M_H_
#define _BTPEERWIREMSG_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0303
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{ ... }} section:

#include "../TCPApp/GenericAppMsg_m.h"
#include "BTTrackerMsg_m.h"
// end cplusplus


/**
 * Enum generated from <tt>BTPeerWireMsg.msg</tt> by opp_msgc.
 * <pre>
 * enum PeerWireMsgIDs
 * {
 *    CHOKE = 0;
 *    UNCHOKE = 1;
 *    INTERESTED = 2;
 *    NOT_INTERESTED = 3;
 *    HAVE = 4;
 *    BITFIELD = 5;
 *    REQUEST = 6;
 *    PIECE = 7;
 *    CANCEL = 8;
 * };
 * </pre>
 */
enum PeerWireMsgIDs {
    CHOKE = 0,
    UNCHOKE = 1,
    INTERESTED = 2,
    NOT_INTERESTED = 3,
    HAVE = 4,
    BITFIELD = 5,
    REQUEST = 6,
    PIECE = 7,
    CANCEL = 8
};

/**
 * Class generated from <tt>BTPeerWireMsg.msg</tt> by opp_msgc.
 * <pre>
 * message BTMsgHandshake extends GenericAppMsg
 * {
 *     properties:
 *         omitGetVerb = true;
 * 
 *     fields:
 * 	char pstrlen;		
 * 	string pstr;
 * 	bool reserved[8];
 * 	string infoHash;
 * 	string peerId;
 * 	
 * };
 * </pre>
 */
class BTMsgHandshake : public GenericAppMsg
{
  protected:
    char pstrlen_var;
    opp_string pstr_var;
    bool reserved_var[8];
    opp_string infoHash_var;
    opp_string peerId_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BTMsgHandshake&);

  public:
    BTMsgHandshake(const char *name=NULL, int kind=0);
    BTMsgHandshake(const BTMsgHandshake& other);
    virtual ~BTMsgHandshake();
    BTMsgHandshake& operator=(const BTMsgHandshake& other);
    virtual cPolymorphic *dup() const {return new BTMsgHandshake(*this);}
    virtual void netPack(cCommBuffer *b);
    virtual void netUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual char pstrlen() const;
    virtual void setPstrlen(char pstrlen_var);
    virtual const char * pstr() const;
    virtual void setPstr(const char * pstr_var);
    virtual unsigned int reservedArraySize() const;
    virtual bool reserved(unsigned int k) const;
    virtual void setReserved(unsigned int k, bool reserved_var);
    virtual const char * infoHash() const;
    virtual void setInfoHash(const char * infoHash_var);
    virtual const char * peerId() const;
    virtual void setPeerId(const char * peerId_var);
};

inline void doPacking(cCommBuffer *b, BTMsgHandshake& obj) {obj.netPack(b);}
inline void doUnpacking(cCommBuffer *b, BTMsgHandshake& obj) {obj.netUnpack(b);}

/**
 * Class generated from <tt>BTPeerWireMsg.msg</tt> by opp_msgc.
 * <pre>
 * message BTKeepAliveMsg  extends GenericAppMsg
 * {
 *     properties:
 *         omitGetVerb = true;
 * 
 *     fields:
 * 	int length_prefix;
 * };
 * </pre>
 */
class BTKeepAliveMsg : public GenericAppMsg
{
  protected:
    int length_prefix_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BTKeepAliveMsg&);

  public:
    BTKeepAliveMsg(const char *name=NULL, int kind=0);
    BTKeepAliveMsg(const BTKeepAliveMsg& other);
    virtual ~BTKeepAliveMsg();
    BTKeepAliveMsg& operator=(const BTKeepAliveMsg& other);
    virtual cPolymorphic *dup() const {return new BTKeepAliveMsg(*this);}
    virtual void netPack(cCommBuffer *b);
    virtual void netUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int length_prefix() const;
    virtual void setLength_prefix(int length_prefix_var);
};

inline void doPacking(cCommBuffer *b, BTKeepAliveMsg& obj) {obj.netPack(b);}
inline void doUnpacking(cCommBuffer *b, BTKeepAliveMsg& obj) {obj.netUnpack(b);}

/**
 * Class generated from <tt>BTPeerWireMsg.msg</tt> by opp_msgc.
 * <pre>
 * message BTPeerStateMsg  extends GenericAppMsg
 * {
 *     properties:
 *         omitGetVerb = true;
 * 
 *     fields:
 * 	int length_prefix;
 * 	unsigned short ID enum(PeerWireMsgIDs);
 * };
 * </pre>
 */
class BTPeerStateMsg : public GenericAppMsg
{
  protected:
    int length_prefix_var;
    unsigned short ID_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BTPeerStateMsg&);

  public:
    BTPeerStateMsg(const char *name=NULL, int kind=0);
    BTPeerStateMsg(const BTPeerStateMsg& other);
    virtual ~BTPeerStateMsg();
    BTPeerStateMsg& operator=(const BTPeerStateMsg& other);
    virtual cPolymorphic *dup() const {return new BTPeerStateMsg(*this);}
    virtual void netPack(cCommBuffer *b);
    virtual void netUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int length_prefix() const;
    virtual void setLength_prefix(int length_prefix_var);
    virtual unsigned short ID() const;
    virtual void setID(unsigned short ID_var);
};

inline void doPacking(cCommBuffer *b, BTPeerStateMsg& obj) {obj.netPack(b);}
inline void doUnpacking(cCommBuffer *b, BTPeerStateMsg& obj) {obj.netUnpack(b);}

/**
 * Class generated from <tt>BTPeerWireMsg.msg</tt> by opp_msgc.
 * <pre>
 * message BTHaveMsg  extends GenericAppMsg
 * {
 *     properties:
 *         omitGetVerb = true;
 * 
 *     fields:
 * 	int length_prefix;
 * 	unsigned short ID enum(PeerWireMsgIDs);
 * 	int index;
 * };
 * </pre>
 */
class BTHaveMsg : public GenericAppMsg
{
  protected:
    int length_prefix_var;
    unsigned short ID_var;
    int index_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BTHaveMsg&);

  public:
    BTHaveMsg(const char *name=NULL, int kind=0);
    BTHaveMsg(const BTHaveMsg& other);
    virtual ~BTHaveMsg();
    BTHaveMsg& operator=(const BTHaveMsg& other);
    virtual cPolymorphic *dup() const {return new BTHaveMsg(*this);}
    virtual void netPack(cCommBuffer *b);
    virtual void netUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int length_prefix() const;
    virtual void setLength_prefix(int length_prefix_var);
    virtual unsigned short ID() const;
    virtual void setID(unsigned short ID_var);
    virtual int index() const;
    virtual void setIndex(int index_var);
};

inline void doPacking(cCommBuffer *b, BTHaveMsg& obj) {obj.netPack(b);}
inline void doUnpacking(cCommBuffer *b, BTHaveMsg& obj) {obj.netUnpack(b);}

/**
 * Class generated from <tt>BTPeerWireMsg.msg</tt> by opp_msgc.
 * <pre>
 * message BTBitfieldMsg  extends GenericAppMsg
 * {
 *     properties:
 *         omitGetVerb = true;
 * 
 *     fields:
 * 	int length_prefix;
 * 	unsigned short ID enum(PeerWireMsgIDs);
 * 	bool bitfield[];
 * };
 * </pre>
 */
class BTBitfieldMsg : public GenericAppMsg
{
  protected:
    int length_prefix_var;
    unsigned short ID_var;
    bool *bitfield_var; // array ptr
    unsigned int bitfield_arraysize;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BTBitfieldMsg&);

  public:
    BTBitfieldMsg(const char *name=NULL, int kind=0);
    BTBitfieldMsg(const BTBitfieldMsg& other);
    virtual ~BTBitfieldMsg();
    BTBitfieldMsg& operator=(const BTBitfieldMsg& other);
    virtual cPolymorphic *dup() const {return new BTBitfieldMsg(*this);}
    virtual void netPack(cCommBuffer *b);
    virtual void netUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int length_prefix() const;
    virtual void setLength_prefix(int length_prefix_var);
    virtual unsigned short ID() const;
    virtual void setID(unsigned short ID_var);
    virtual void setBitfieldArraySize(unsigned int size);
    virtual unsigned int bitfieldArraySize() const;
    virtual bool bitfield(unsigned int k) const;
    virtual void setBitfield(unsigned int k, bool bitfield_var);
};

inline void doPacking(cCommBuffer *b, BTBitfieldMsg& obj) {obj.netPack(b);}
inline void doUnpacking(cCommBuffer *b, BTBitfieldMsg& obj) {obj.netUnpack(b);}

/**
 * Class generated from <tt>BTPeerWireMsg.msg</tt> by opp_msgc.
 * <pre>
 * message BTRequestCancelMsg  extends GenericAppMsg
 * {
 *     properties:
 *         omitGetVerb = true;
 * 
 *     fields:
 * 	int length_prefix;
 * 	unsigned short ID enum(PeerWireMsgIDs);
 * 	int index;
 * 	int begin;
 * 	int dataLength;
 * 	bool endGame;
 * };
 * </pre>
 */
class BTRequestCancelMsg : public GenericAppMsg
{
  protected:
    int length_prefix_var;
    unsigned short ID_var;
    int index_var;
    int begin_var;
    int dataLength_var;
    bool endGame_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BTRequestCancelMsg&);

  public:
    BTRequestCancelMsg(const char *name=NULL, int kind=0);
    BTRequestCancelMsg(const BTRequestCancelMsg& other);
    virtual ~BTRequestCancelMsg();
    BTRequestCancelMsg& operator=(const BTRequestCancelMsg& other);
    virtual cPolymorphic *dup() const {return new BTRequestCancelMsg(*this);}
    virtual void netPack(cCommBuffer *b);
    virtual void netUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int length_prefix() const;
    virtual void setLength_prefix(int length_prefix_var);
    virtual unsigned short ID() const;
    virtual void setID(unsigned short ID_var);
    virtual int index() const;
    virtual void setIndex(int index_var);
    virtual int begin() const;
    virtual void setBegin(int begin_var);
    virtual int dataLength() const;
    virtual void setDataLength(int dataLength_var);
    virtual bool endGame() const;
    virtual void setEndGame(bool endGame_var);
};

inline void doPacking(cCommBuffer *b, BTRequestCancelMsg& obj) {obj.netPack(b);}
inline void doUnpacking(cCommBuffer *b, BTRequestCancelMsg& obj) {obj.netUnpack(b);}

/**
 * Class generated from <tt>BTPeerWireMsg.msg</tt> by opp_msgc.
 * <pre>
 * message BTPieceMsg  extends GenericAppMsg
 * {
 *     properties:
 *         omitGetVerb = true;
 * 
 *     fields:
 * 	int length_prefix;
 * 	unsigned short ID enum(PeerWireMsgIDs);
 * 	int index;
 * 	int begin;
 * 	string data;
 * };
 * </pre>
 */
class BTPieceMsg : public GenericAppMsg
{
  protected:
    int length_prefix_var;
    unsigned short ID_var;
    int index_var;
    int begin_var;
    opp_string data_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BTPieceMsg&);

  public:
    BTPieceMsg(const char *name=NULL, int kind=0);
    BTPieceMsg(const BTPieceMsg& other);
    virtual ~BTPieceMsg();
    BTPieceMsg& operator=(const BTPieceMsg& other);
    virtual cPolymorphic *dup() const {return new BTPieceMsg(*this);}
    virtual void netPack(cCommBuffer *b);
    virtual void netUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int length_prefix() const;
    virtual void setLength_prefix(int length_prefix_var);
    virtual unsigned short ID() const;
    virtual void setID(unsigned short ID_var);
    virtual int index() const;
    virtual void setIndex(int index_var);
    virtual int begin() const;
    virtual void setBegin(int begin_var);
    virtual const char * data() const;
    virtual void setData(const char * data_var);
};

inline void doPacking(cCommBuffer *b, BTPieceMsg& obj) {obj.netPack(b);}
inline void doUnpacking(cCommBuffer *b, BTPieceMsg& obj) {obj.netUnpack(b);}

/**
 * Class generated from <tt>BTPeerWireMsg.msg</tt> by opp_msgc.
 * <pre>
 * message BTInternalMsg  extends cMessage
 * {
 *     properties:
 *         omitGetVerb = true;
 * 
 *     fields:
 * 	string text;
 * 	PEER peer;
 * 	int pieceIndex;
 * 	int blockIndex;
 * 	bool chokedPiece;
 * };
 * </pre>
 */
class BTInternalMsg : public cMessage
{
  protected:
    opp_string text_var;
    PEER peer_var;
    int pieceIndex_var;
    int blockIndex_var;
    bool chokedPiece_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BTInternalMsg&);

  public:
    BTInternalMsg(const char *name=NULL, int kind=0);
    BTInternalMsg(const BTInternalMsg& other);
    virtual ~BTInternalMsg();
    BTInternalMsg& operator=(const BTInternalMsg& other);
    virtual cPolymorphic *dup() const {return new BTInternalMsg(*this);}
    virtual void netPack(cCommBuffer *b);
    virtual void netUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * text() const;
    virtual void setText(const char * text_var);
    virtual PEER& peer();
    virtual const PEER& peer() const {return const_cast<BTInternalMsg*>(this)->peer();}
    virtual void setPeer(const PEER& peer_var);
    virtual int pieceIndex() const;
    virtual void setPieceIndex(int pieceIndex_var);
    virtual int blockIndex() const;
    virtual void setBlockIndex(int blockIndex_var);
    virtual bool chokedPiece() const;
    virtual void setChokedPiece(bool chokedPiece_var);
};

inline void doPacking(cCommBuffer *b, BTInternalMsg& obj) {obj.netPack(b);}
inline void doUnpacking(cCommBuffer *b, BTInternalMsg& obj) {obj.netUnpack(b);}

/**
 * Class generated from <tt>BTPeerWireMsg.msg</tt> by opp_msgc.
 * <pre>
 * message BTAcceptConnectionMsg  extends GenericAppMsg
 * {
 *     properties:
 *         omitGetVerb = true;
 * 
 *     fields:
 * 	bool accept = true;
 * };
 * </pre>
 */
class BTAcceptConnectionMsg : public GenericAppMsg
{
  protected:
    bool accept_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BTAcceptConnectionMsg&);

  public:
    BTAcceptConnectionMsg(const char *name=NULL, int kind=0);
    BTAcceptConnectionMsg(const BTAcceptConnectionMsg& other);
    virtual ~BTAcceptConnectionMsg();
    BTAcceptConnectionMsg& operator=(const BTAcceptConnectionMsg& other);
    virtual cPolymorphic *dup() const {return new BTAcceptConnectionMsg(*this);}
    virtual void netPack(cCommBuffer *b);
    virtual void netUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool accept() const;
    virtual void setAccept(bool accept_var);
};

inline void doPacking(cCommBuffer *b, BTAcceptConnectionMsg& obj) {obj.netPack(b);}
inline void doUnpacking(cCommBuffer *b, BTAcceptConnectionMsg& obj) {obj.netUnpack(b);}

#endif // _BTPEERWIREMSG_M_H_
