//
// Generated file, do not edit! Created by opp_msgc 4.1 from applications/dde/ddeMsg.msg.
//

#ifndef _DDEMSG_M_H_
#define _DDEMSG_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0401
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "INETDefs.h"
#include "GenericAppMsg_m.h"
#include "IPvXAddress.h"
#include "InfoServer.h"
#include "MACAddress.h"
#include <list>
struct apInfo {
	int ID;
	IPvXAddress apAddress;
	int numUsers;
	float load;
	float packetLoss;
	float classifyValue;
	bool cachedContent;
	MACAddress macAddress;
	apInfo() {
		ID = -1; classifyValue = -1, load = -1, packetLoss = -1;
	}
};
typedef std::list<apInfo> APList;
// }}



/**
 * Class generated from <tt>applications/dde/ddeMsg.msg</tt> by opp_msgc.
 * <pre>
 * packet ddeMsg extends GenericAppMsg
 * {
 *     int classifyOperation = -1; 
 *     float apClassifyValue = -1;
 *     float nsClassifyValue = -1;
 *     float mnClassifyValue = -1;
 *     float seedsPerLeechers = -1;
 *     double BW_requirement = -1;
 *     int numUsers = -1;
 *     float load = -1;
 *     float packetLoss = -1;
 *     APList apList;
 *     bool cachedContent;
 *     string hostID;
 *     string assocAP;
 *     double consumedBW = -1;
 *     MACAddress macAddress;
 *     float signalStrength = -1;
 *     double client_x = -1;
 *     double client_y = -1;
 *     int userClass = -1;
 *     MACAddress HO_to_AP_MAC;
 *     string HO_to_AP_SSID;
 *     double maxBW = -1;
 *     double usedBW = -1;
 *     double avBW = -1;
 *     float rssiDBM = -1;
 *     float sensitivity = -1;
 *     float noiseLevelDBM = -1;
 *     int numGold = -1;
 *     int numSilver = -1;
 *     int numBronze = -1;
 *     bool backgroundTraffic;
 *     
 * }
 * </pre>
 */
class ddeMsg : public ::GenericAppMsg
{
  protected:
    int classifyOperation_var;
    float apClassifyValue_var;
    float nsClassifyValue_var;
    float mnClassifyValue_var;
    float seedsPerLeechers_var;
    double BW_requirement_var;
    int numUsers_var;
    float load_var;
    float packetLoss_var;
    ::APList apList_var;
    bool cachedContent_var;
    opp_string hostID_var;
    opp_string assocAP_var;
    double consumedBW_var;
    ::MACAddress macAddress_var;
    float signalStrength_var;
    double client_x_var;
    double client_y_var;
    int userClass_var;
    ::MACAddress HO_to_AP_MAC_var;
    opp_string HO_to_AP_SSID_var;
    double maxBW_var;
    double usedBW_var;
    double avBW_var;
    float rssiDBM_var;
    float sensitivity_var;
    float noiseLevelDBM_var;
    int numGold_var;
    int numSilver_var;
    int numBronze_var;
    bool backgroundTraffic_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ddeMsg&);

  public:
    ddeMsg(const char *name=NULL, int kind=0);
    ddeMsg(const ddeMsg& other);
    virtual ~ddeMsg();
    ddeMsg& operator=(const ddeMsg& other);
    virtual ddeMsg *dup() const {return new ddeMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getClassifyOperation() const;
    virtual void setClassifyOperation(int classifyOperation_var);
    virtual float getApClassifyValue() const;
    virtual void setApClassifyValue(float apClassifyValue_var);
    virtual float getNsClassifyValue() const;
    virtual void setNsClassifyValue(float nsClassifyValue_var);
    virtual float getMnClassifyValue() const;
    virtual void setMnClassifyValue(float mnClassifyValue_var);
    virtual float getSeedsPerLeechers() const;
    virtual void setSeedsPerLeechers(float seedsPerLeechers_var);
    virtual double getBW_requirement() const;
    virtual void setBW_requirement(double BW_requirement_var);
    virtual int getNumUsers() const;
    virtual void setNumUsers(int numUsers_var);
    virtual float getLoad() const;
    virtual void setLoad(float load_var);
    virtual float getPacketLoss() const;
    virtual void setPacketLoss(float packetLoss_var);
    virtual APList& getApList();
    virtual const APList& getApList() const {return const_cast<ddeMsg*>(this)->getApList();}
    virtual void setApList(const APList& apList_var);
    virtual bool getCachedContent() const;
    virtual void setCachedContent(bool cachedContent_var);
    virtual const char * getHostID() const;
    virtual void setHostID(const char * hostID_var);
    virtual const char * getAssocAP() const;
    virtual void setAssocAP(const char * assocAP_var);
    virtual double getConsumedBW() const;
    virtual void setConsumedBW(double consumedBW_var);
    virtual MACAddress& getMacAddress();
    virtual const MACAddress& getMacAddress() const {return const_cast<ddeMsg*>(this)->getMacAddress();}
    virtual void setMacAddress(const MACAddress& macAddress_var);
    virtual float getSignalStrength() const;
    virtual void setSignalStrength(float signalStrength_var);
    virtual double getClient_x() const;
    virtual void setClient_x(double client_x_var);
    virtual double getClient_y() const;
    virtual void setClient_y(double client_y_var);
    virtual int getUserClass() const;
    virtual void setUserClass(int userClass_var);
    virtual MACAddress& getHO_to_AP_MAC();
    virtual const MACAddress& getHO_to_AP_MAC() const {return const_cast<ddeMsg*>(this)->getHO_to_AP_MAC();}
    virtual void setHO_to_AP_MAC(const MACAddress& HO_to_AP_MAC_var);
    virtual const char * getHO_to_AP_SSID() const;
    virtual void setHO_to_AP_SSID(const char * HO_to_AP_SSID_var);
    virtual double getMaxBW() const;
    virtual void setMaxBW(double maxBW_var);
    virtual double getUsedBW() const;
    virtual void setUsedBW(double usedBW_var);
    virtual double getAvBW() const;
    virtual void setAvBW(double avBW_var);
    virtual float getRssiDBM() const;
    virtual void setRssiDBM(float rssiDBM_var);
    virtual float getSensitivity() const;
    virtual void setSensitivity(float sensitivity_var);
    virtual float getNoiseLevelDBM() const;
    virtual void setNoiseLevelDBM(float noiseLevelDBM_var);
    virtual int getNumGold() const;
    virtual void setNumGold(int numGold_var);
    virtual int getNumSilver() const;
    virtual void setNumSilver(int numSilver_var);
    virtual int getNumBronze() const;
    virtual void setNumBronze(int numBronze_var);
    virtual bool getBackgroundTraffic() const;
    virtual void setBackgroundTraffic(bool backgroundTraffic_var);
};

inline void doPacking(cCommBuffer *b, ddeMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ddeMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/dde/ddeMsg.msg</tt> by opp_msgc.
 * <pre>
 * message ddeInternalMsg extends GenericAppMsg
 * {
 *     int apIndex = -1;
 *     APList apList;
 *     IPvXAddress clientAddr = IPvXAddress("0.0.0.0");
 *     bool cachedContent;
 *     
 * }
 * </pre>
 */
class ddeInternalMsg : public ::GenericAppMsg
{
  protected:
    int apIndex_var;
    ::APList apList_var;
    ::IPvXAddress clientAddr_var;
    bool cachedContent_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ddeInternalMsg&);

  public:
    ddeInternalMsg(const char *name=NULL, int kind=0);
    ddeInternalMsg(const ddeInternalMsg& other);
    virtual ~ddeInternalMsg();
    ddeInternalMsg& operator=(const ddeInternalMsg& other);
    virtual ddeInternalMsg *dup() const {return new ddeInternalMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getApIndex() const;
    virtual void setApIndex(int apIndex_var);
    virtual APList& getApList();
    virtual const APList& getApList() const {return const_cast<ddeInternalMsg*>(this)->getApList();}
    virtual void setApList(const APList& apList_var);
    virtual IPvXAddress& getClientAddr();
    virtual const IPvXAddress& getClientAddr() const {return const_cast<ddeInternalMsg*>(this)->getClientAddr();}
    virtual void setClientAddr(const IPvXAddress& clientAddr_var);
    virtual bool getCachedContent() const;
    virtual void setCachedContent(bool cachedContent_var);
};

inline void doPacking(cCommBuffer *b, ddeInternalMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ddeInternalMsg& obj) {obj.parsimUnpack(b);}


#endif // _DDEMSG_M_H_
