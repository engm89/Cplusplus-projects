//
// Generated file, do not edit! Created by opp_msgc 4.1 from applications/supercom/SuperComMsg.msg.
//

#ifndef _SUPERCOMMSG_M_H_
#define _SUPERCOMMSG_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0401
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "INETDefs.h"
#include "GenericAppMsg_m.h"
#include "IPvXAddress.h"
// }}



/**
 * Class generated from <tt>applications/supercom/SuperComMsg.msg</tt> by opp_msgc.
 * <pre>
 * packet SuperComMsg extends GenericAppMsg
 * 
 * {
 *     long inputData = -1;
 *     long outputData = -1;
 *     int cores = -1;
 *     int nodes = -1;
 *     int memory = -1;
 *     int load = -1;
 *     double runTime = -1;
 *     int serverNumber = -1;
 *     int type = -1; 
 *     double networkLoad = 0.0; 
 *     double loadedTime = 1.0;
 *     int priority = 1;
 *     int sleepMode = -1; 
 *     simtime_t timeOfStart = -1;
 *     IPvXAddress clientAddress = IPvXAddress("0.0.0.0");
 *     IPvXAddress usoAddress = IPvXAddress("0.0.0.0");
 *     IPvXAddress rmsAddress = IPvXAddress("0.0.0.0");
 *     int jobID = -1;
 *     int submitTime = -1;
 *     bool energyAware = false;
 *     
 * }
 * </pre>
 */
class SuperComMsg : public ::GenericAppMsg
{
  protected:
    long inputData_var;
    long outputData_var;
    int cores_var;
    int nodes_var;
    int memory_var;
    int load_var;
    double runTime_var;
    int serverNumber_var;
    int type_var;
    double networkLoad_var;
    double loadedTime_var;
    int priority_var;
    int sleepMode_var;
    simtime_t timeOfStart_var;
    ::IPvXAddress clientAddress_var;
    ::IPvXAddress usoAddress_var;
    ::IPvXAddress rmsAddress_var;
    int jobID_var;
    int submitTime_var;
    bool energyAware_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SuperComMsg&);

  public:
    SuperComMsg(const char *name=NULL, int kind=0);
    SuperComMsg(const SuperComMsg& other);
    virtual ~SuperComMsg();
    SuperComMsg& operator=(const SuperComMsg& other);
    virtual SuperComMsg *dup() const {return new SuperComMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual long getInputData() const;
    virtual void setInputData(long inputData_var);
    virtual long getOutputData() const;
    virtual void setOutputData(long outputData_var);
    virtual int getCores() const;
    virtual void setCores(int cores_var);
    virtual int getNodes() const;
    virtual void setNodes(int nodes_var);
    virtual int getMemory() const;
    virtual void setMemory(int memory_var);
    virtual int getLoad() const;
    virtual void setLoad(int load_var);
    virtual double getRunTime() const;
    virtual void setRunTime(double runTime_var);
    virtual int getServerNumber() const;
    virtual void setServerNumber(int serverNumber_var);
    virtual int getType() const;
    virtual void setType(int type_var);
    virtual double getNetworkLoad() const;
    virtual void setNetworkLoad(double networkLoad_var);
    virtual double getLoadedTime() const;
    virtual void setLoadedTime(double loadedTime_var);
    virtual int getPriority() const;
    virtual void setPriority(int priority_var);
    virtual int getSleepMode() const;
    virtual void setSleepMode(int sleepMode_var);
    virtual simtime_t getTimeOfStart() const;
    virtual void setTimeOfStart(simtime_t timeOfStart_var);
    virtual IPvXAddress& getClientAddress();
    virtual const IPvXAddress& getClientAddress() const {return const_cast<SuperComMsg*>(this)->getClientAddress();}
    virtual void setClientAddress(const IPvXAddress& clientAddress_var);
    virtual IPvXAddress& getUsoAddress();
    virtual const IPvXAddress& getUsoAddress() const {return const_cast<SuperComMsg*>(this)->getUsoAddress();}
    virtual void setUsoAddress(const IPvXAddress& usoAddress_var);
    virtual IPvXAddress& getRmsAddress();
    virtual const IPvXAddress& getRmsAddress() const {return const_cast<SuperComMsg*>(this)->getRmsAddress();}
    virtual void setRmsAddress(const IPvXAddress& rmsAddress_var);
    virtual int getJobID() const;
    virtual void setJobID(int jobID_var);
    virtual int getSubmitTime() const;
    virtual void setSubmitTime(int submitTime_var);
    virtual bool getEnergyAware() const;
    virtual void setEnergyAware(bool energyAware_var);
};

inline void doPacking(cCommBuffer *b, SuperComMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SuperComMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/supercom/SuperComMsg.msg</tt> by opp_msgc.
 * <pre>
 * message SuperComInternalMsg extends cMessage
 * {
 *     int serverIndex = -1;
 *     double runTime = -1;
 *     int connId = -1;
 *     IPvXAddress clientAddress = IPvXAddress("0.0.0.0");
 *     IPvXAddress usoAddress = IPvXAddress("0.0.0.0");
 *     IPvXAddress rmsAddress = IPvXAddress("0.0.0.0");
 *     int needMemory = -1;
 *     int nodes = -1;
 *     int cores = -1;
 *     int load = -1;
 *     simtime_t subTime = -1;
 *     long inputData = -1;
 *     long outputData = -1;
 *     double networkLoad = 0.0; 
 *     double loadedTime = 1.0;
 *     int priority = 1;
 *     simtime_t timeOfStart = -1;
 *     int sleepMode = -1; 
 *     int jobID = -1;
 *     int submitTime = -1;
 *     bool energyAware = false;
 * }
 * </pre>
 */
class SuperComInternalMsg : public ::cMessage
{
  protected:
    int serverIndex_var;
    double runTime_var;
    int connId_var;
    ::IPvXAddress clientAddress_var;
    ::IPvXAddress usoAddress_var;
    ::IPvXAddress rmsAddress_var;
    int needMemory_var;
    int nodes_var;
    int cores_var;
    int load_var;
    simtime_t subTime_var;
    long inputData_var;
    long outputData_var;
    double networkLoad_var;
    double loadedTime_var;
    int priority_var;
    simtime_t timeOfStart_var;
    int sleepMode_var;
    int jobID_var;
    int submitTime_var;
    bool energyAware_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SuperComInternalMsg&);

  public:
    SuperComInternalMsg(const char *name=NULL, int kind=0);
    SuperComInternalMsg(const SuperComInternalMsg& other);
    virtual ~SuperComInternalMsg();
    SuperComInternalMsg& operator=(const SuperComInternalMsg& other);
    virtual SuperComInternalMsg *dup() const {return new SuperComInternalMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getServerIndex() const;
    virtual void setServerIndex(int serverIndex_var);
    virtual double getRunTime() const;
    virtual void setRunTime(double runTime_var);
    virtual int getConnId() const;
    virtual void setConnId(int connId_var);
    virtual IPvXAddress& getClientAddress();
    virtual const IPvXAddress& getClientAddress() const {return const_cast<SuperComInternalMsg*>(this)->getClientAddress();}
    virtual void setClientAddress(const IPvXAddress& clientAddress_var);
    virtual IPvXAddress& getUsoAddress();
    virtual const IPvXAddress& getUsoAddress() const {return const_cast<SuperComInternalMsg*>(this)->getUsoAddress();}
    virtual void setUsoAddress(const IPvXAddress& usoAddress_var);
    virtual IPvXAddress& getRmsAddress();
    virtual const IPvXAddress& getRmsAddress() const {return const_cast<SuperComInternalMsg*>(this)->getRmsAddress();}
    virtual void setRmsAddress(const IPvXAddress& rmsAddress_var);
    virtual int getNeedMemory() const;
    virtual void setNeedMemory(int needMemory_var);
    virtual int getNodes() const;
    virtual void setNodes(int nodes_var);
    virtual int getCores() const;
    virtual void setCores(int cores_var);
    virtual int getLoad() const;
    virtual void setLoad(int load_var);
    virtual simtime_t getSubTime() const;
    virtual void setSubTime(simtime_t subTime_var);
    virtual long getInputData() const;
    virtual void setInputData(long inputData_var);
    virtual long getOutputData() const;
    virtual void setOutputData(long outputData_var);
    virtual double getNetworkLoad() const;
    virtual void setNetworkLoad(double networkLoad_var);
    virtual double getLoadedTime() const;
    virtual void setLoadedTime(double loadedTime_var);
    virtual int getPriority() const;
    virtual void setPriority(int priority_var);
    virtual simtime_t getTimeOfStart() const;
    virtual void setTimeOfStart(simtime_t timeOfStart_var);
    virtual int getSleepMode() const;
    virtual void setSleepMode(int sleepMode_var);
    virtual int getJobID() const;
    virtual void setJobID(int jobID_var);
    virtual int getSubmitTime() const;
    virtual void setSubmitTime(int submitTime_var);
    virtual bool getEnergyAware() const;
    virtual void setEnergyAware(bool energyAware_var);
};

inline void doPacking(cCommBuffer *b, SuperComInternalMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SuperComInternalMsg& obj) {obj.parsimUnpack(b);}


#endif // _SUPERCOMMSG_M_H_
